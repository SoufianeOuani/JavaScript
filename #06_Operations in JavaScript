üî∂Operations in JavaScript
JavaScript provides various types of operations, including arithmetic, assignment, comparison, logical, bitwise, and more.

1Ô∏è‚É£ Arithmetic Operations
Used for mathematical calculations.

 _____________________________________________________________
|  Operator    Description	           Example	    Output
|___________|_______________________|_____________|___________
|  +           Addition	                 5 + 3	        8
|___________|_______________________|_____________|___________
|  -	         Subtraction	            10 - 6	        4
|___________|_______________________|_____________|___________
|  *	         Multiplication	          4 * 2	          8
|___________|_______________________|_____________|___________
|  /	         Division                 10 / 2	        5
|___________|_______________________|_____________|___________
|  %	         Modulus (Remainder)  	  10 % 3	        1
|___________|_______________________|_____________|___________
|  **	         Exponentiation          	2 ** 3	        8
|___________|_______________________|_____________|___________

Example:

 _____________________________________________________________
|  let a = 10, b = 5;                                         | 
|  console.log(a + b); // 15                                  |
|  console.log(a - b); // 5                                   | 
|  console.log(a * b); // 50                                  |  
|  console.log(a / b); // 2                                   | 
|  console.log(a % b); // 0                                   | 
|  console.log(a ** 2); // 100                                |    
|_____________________________________________________________|


2Ô∏è‚É£Assignment Operations
Used to assign values to variables.

 __________________________________________________________________
|  Operator	  Description	              Example
|__________________________________________________________________
|  =        	Assign	                  x = 10
|__________________________________________________________________
|  +=	        Add & Assign	            x += 5 (same as x = x + 5)
|__________________________________________________________________
|  -=	        Subtract & Assign	        x -= 2
|__________________________________________________________________
|  *=	        Multiply & Assign	        x *= 3
|__________________________________________________________________
|  /=	        Divide & Assign	          x /= 2
|__________________________________________________________________
|  %=	        Modulus & Assign	        x %= 3
|__________________________________________________________________


Example:

 ___________________________
|let x = 10;                |
|x += 5; // x = 15          |  
|x *= 2; // x = 30          |
|console.log(x); // 30      |  
|___________________________|


3Ô∏è‚É£Comparison Operations
Used to compare values, returning true or false.
 __________________________________________________________________________
|  Operator	        Description	            Example	          Output
|__________|__________________________|__________________|_________________
|  ==	              Equal (loose)	          5 == "5"	        true
|__________|__________________________|__________________|_________________
|  ===	            Strict Equal	          5 === "5"	        false
|__________|__________________________|__________________|_________________
|  !=	              Not Equal	              5 != "5"	        false
|__________|__________________________|__________________|_________________
|  !==	            Strict Not Equal	      5 !== "5"	        true
|__________|__________________________|__________________|_________________
|  >	              Greater Than	          10 > 5	          true
|__________|__________________________|__________________|_________________
|  <	              Less Than	              3 < 8	            true
|__________|__________________________|__________________|_________________
|  >=	              Greater or Equal	      5 >= 5	          true
|__________|__________________________|__________________|_________________
|  <=	              Less or Equal	          4 <= 2	          false
|__________|__________________________|__________________|_________________


Example:
 ____________________________________________________
|console.log(5 == "5");  // true (loose equality)    |
|console.log(5 === "5"); // false (strict equality)  |
|console.log(10 > 5);    // true                     | 
|console.log(5 !== 3);   // true                     | 
|____________________________________________________|


4Ô∏è‚É£Logical Operations
Used for combining boolean values.
 __________________________________________________________________
|  Operator	      Description	      Example	          Output
|___________|___________________|___________________|______________
|  &&	            AND	              true && false	    false
|___________|___________________|___________________|______________
|  `		                            `	                  OR
|___________|___________________|___________________|______________
|  !	            NOT	              !true	            false
|___________|___________________|___________________|______________


Example:
 _____________________________________________
|  console.log(true && false); // false       | 
|  console.log(true || false); // true        |  
|  console.log(!false); // true               | 
|_____________________________________________|


5Ô∏è‚É£Bitwise Operations
Used to perform bit-level calculations.
 ____________________________________________________________________________________
|  Operator	    Description	                Example
|____________|___________________|___________________________________________________
|  &	            AND                       5 & 1 (0101 & 0001 ‚Üí 0001)
|____________|___________________|___________________________________________________
|  `	            `	                        OR
|____________|___________________|___________________________________________________
|  ^	            XOR	                      5 ^ 1 (0101 ^ 0001 ‚Üí 0100)
|____________|___________________|___________________________________________________
|  ~	            NOT	                      ~5 (flips bits)
|____________|___________________|___________________________________________________
|  <<	          Left Shift	                5 << 1 (0101 ‚Üí 1010)
|____________|___________________|___________________________________________________
|  >>	          Right Shift	                5 >> 1 (0101 ‚Üí 0010)
|____________|___________________|___________________________________________________


Example:
 ______________________________
|  console.log(5 & 1); // 1    |  
|  console.log(5 | 1); // 5    |
|  console.log(5 ^ 1); // 4    |
|  console.log(~5);    // -6   | 
|  console.log(5 << 1); // 10  |
|  console.log(5 >> 1); // 2   | 
|______________________________|


6Ô∏è‚É£String Operations
Used to manipulate strings.
 _______________________________________________________________________________
|  Operator	        Description	        Example	                Output
|_____________|____________________|________________________|___________________
|  +	              Concatenation	      "Hello" + " World"	    "Hello World"
|_____________|____________________|________________________|___________________
|  +=	              Append	             str += "!"	            "Hello!"
|_____________|____________________|________________________|___________________


Example:
 __________________________________________
|  let text = "Hello";                     | 
|  text += " World!";                      |  
|  console.log(text); // "Hello World!"    |
|__________________________________________|


7Ô∏è‚É£Ternary Operation (Conditional)
A shorthand for if-else.

 ________________________________________________
|  let age = 18;                                 |
|  let status = (age >= 18) ? "Adult" : "Minor"; |
|  console.log(status); // "Adult"               | 
|________________________________________________|

üî∂Conclusion:

üìåArithmetic (+, -, *, /, %)
üìåAssignment (=, +=, -=, *=, /=)
üìåComparison (==, ===, !=, !==, >, <, >=, <=)
üìåLogical (&&, ||, !)
üìåBitwise (&, |, ^, ~, <<, >>)
üìåString (+, +=)
üìåTernary (condition ? trueResult : falseResult)
üîπ Best Practice: Always use === instead of == to avoid unexpected type conversions.

