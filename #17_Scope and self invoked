حسنًا سفيان، خليني أشرح لك ببساطة وبالدارجة شنو كيعني "scope" وشنو هي "self-invoked function" فـ JavaScript:

---

### ✅ **أولاً: Scope (نطاق المتغيرات)**

**Scope** هو المكان اللي تقدر تستعمل فيه المتغيرات ديالك. كاينين جوج أنواع أساسيين:

#### 1. **Global Scope**  
أي متغير كتكتبو خارج من أي دالة، كيبقى متاح فـ الكود كامل.

```js
let name = "Sofiane"; // Global scope

function sayHello() {
  console.log(name); // تقدر توصل للمتغير هنا
}
sayHello();
```

#### 2. **Local Scope**  
المتغيرات اللي كتكون داخل دالة كتكون محصورة فداك النطاق فقط.

```js
function sayHi() {
  let greeting = "Hi"; // Local scope
  console.log(greeting);
}

sayHi();
// console.log(greeting); // هادي غادي تعطيك error لأن greeting غير موجودة خارج الدالة
```

#### 📌 ملاحظة:
- المتغيرات اللي كتعلن عليهم بـ `let` و `const` عندهم **block scope** (حتى داخل if أو for).
- أما `var` فكتكون عندها function scope فقط.

---

### ✅ **ثانياً: Self-Invoked Functions (IIFE)**

هدي اختصار لـ:
> **Immediately Invoked Function Expression**

يعني دالة كتبنيها وكتشغلها فـ نفس اللحظة.

#### 🔧 الشكل ديالها:

```js
(function () {
  console.log("أنا دالة وتشغلت مباشرة!");
})();
```

أو:

```js
(() => {
  console.log("أنا دالة سهمية وتشغلت مباشرة!");
})();
```

#### 🧠 علاش نستخدموها؟
- باش نخلق **نطاق خاص** للمتغيرات (نمنعهم من التأثير على الكود الخارجي).
- كانت تُستخدم بزاف قبل `let` و `const`، ولكن مازال كتنفع فـ بعض الحالات.

---

### 🔚 الخلاصة:

| المفهوم | الشرح |
|--------|-------|
| Scope | فين تقدر تستعمل المتغيرات (عالمي أو محلي) |
| IIFE | دالة كتبنيها وتشغلها مباشرة، كتستعمل باش تحبس المتغيرات داخلها |

