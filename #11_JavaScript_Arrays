(**Arrays**) في جافاسكريبت، المصفوفات 
.هي كائنات تستخدم لتخزين عدة قيم في متغير واحد
يمكن أن تحتوي المصفوفات على أي نوع من البيانات، بما في ذلك الأرقام، النصوص، الكائنات، وحتى مصفوفات أخرى

---

## 1️⃣ **إنشاء مصفوفة**
### **📌 الطريقة الأساسية:**
```javascript
let fruits = ["Apple", "Banana", "Orange"];
```
### **📌 باستخدام `new Array()`:**
```javascript
let numbers = new Array(1, 2, 3, 4, 5);
```
⚠️ **ملاحظة:** من الأفضل استخدام الطريقة الأولى لأنها أكثر وضوحًا.

---

## 2️⃣ **الوصول إلى عناصر المصفوفة**
```javascript
console.log(fruits[0]); // Apple
console.log(fruits[1]); // Banana
console.log(fruits[2]); // Orange
```

---

## 3️⃣ **تعديل عنصر في المصفوفة**
```javascript
fruits[1] = "Mango";
console.log(fruits); // ["Apple", "Mango", "Orange"]
```

---

## 4️⃣ **إضافة وحذف العناصر**
### **📌 الإضافة في نهاية المصفوفة (`push`)**
```javascript
fruits.push("Grapes");
console.log(fruits); // ["Apple", "Mango", "Orange", "Grapes"]
```
### **📌 الإضافة في بداية المصفوفة (`unshift`)**
```javascript
fruits.unshift("Pineapple");
console.log(fruits); // ["Pineapple", "Apple", "Mango", "Orange", "Grapes"]
```
### **📌 الحذف من نهاية المصفوفة (`pop`)**
```javascript
fruits.pop();
console.log(fruits); // ["Pineapple", "Apple", "Mango", "Orange"]
```
### **📌 الحذف من بداية المصفوفة (`shift`)**
```javascript
fruits.shift();
console.log(fruits); // ["Apple", "Mango", "Orange"]
```

---

## 5️⃣ **طول المصفوفة (`length`)**
```javascript
console.log(fruits.length); // 3
```

---

## 6️⃣ **البحث داخل المصفوفة**
### **📌 `indexOf()` - البحث عن عنصر وإرجاع فهرسه**
```javascript
console.log(fruits.indexOf("Mango")); // 1
```
### **📌 `includes()` - التحقق مما إذا كان العنصر موجودًا**
```javascript
console.log(fruits.includes("Orange")); // true
console.log(fruits.includes("Grapes")); // false
```

---

## 7️⃣ **تقطيع المصفوفة (`slice`)**
```javascript
let citrus = fruits.slice(1, 3); 
console.log(citrus); // ["Mango", "Orange"]
```

---

## 8️⃣ **حذف أو استبدال عناصر (`splice`)**
### **📌 حذف عنصرين من الفهرس 1**
```javascript
fruits.splice(1, 2);
console.log(fruits); // ["Apple"]
```
### **📌 إدراج عناصر في المصفوفة**
```javascript
fruits.splice(1, 0, "Kiwi", "Strawberry");
console.log(fruits); // ["Apple", "Kiwi", "Strawberry"]
```

---

## 9️⃣ **دمج المصفوفات (`concat`)**
```javascript
let moreFruits = ["Watermelon", "Peach"];
let allFruits = fruits.concat(moreFruits);
console.log(allFruits); // ["Apple", "Kiwi", "Strawberry", "Watermelon", "Peach"]
```

---

## 🔟 **تكرار العناصر (`map`, `forEach`, `filter`, `reduce`)**
### **📌 `forEach()` - تنفيذ وظيفة لكل عنصر**
```javascript
fruits.forEach(fruit => console.log(fruit));
```
### **📌 `map()` - إنشاء مصفوفة جديدة بناءً على المصفوفة الأصلية**
```javascript
let upperCaseFruits = fruits.map(fruit => fruit.toUpperCase());
console.log(upperCaseFruits);
```
### **📌 `filter()` - تصفية العناصر بناءً على شرط معين**
```javascript
let filteredFruits = fruits.filter(fruit => fruit.length > 5);
console.log(filteredFruits);
```
### **📌 `reduce()` - اختزال المصفوفة إلى قيمة واحدة**
```javascript
let numbers = [1, 2, 3, 4, 5];
let sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // 15
```

---
